Aula - 37

faça uma cópia do arquivo "00-starting-project" renomeando-o com o próximo número de exercício.

no caminho desse novo arquivo, execute o comando "npm install" para instalar as dependências
do projeto.

depois de instalar, execute o comando "npm run dev" para inicializar o servidor no projeto.
(para parar o servidor, execute "Ctrl + c").

*delete a pasta "node_modules" e a pasta "assets" antes de fazer um commit.

-----------------------------------------------------------------------------------------

Aula - 39

no arquivo "App.jsx", crie um componente "Header" acima do componente "App". 

esse componente deve retornar o elemento "header" que está dentro do componente "App". 

recorte o elemento "header" que está na função "App" e cole para que esse elemento seja 
o retorno da função "Header".

agora que o componente foi criado, utilizi-o no local em que o elemento "header" estava.

-----------------------------------------------------------------------------------------

Aula - 42

no arquivo "App.jsx", crie uma constante "reactDescriptions" que recebe o array 
"['Fundamental', 'Crucial', 'Core']".

crie uma função "genRandomInt" com um parâmetro "max" que retorna um número aleatório entre zero 
e um valor máximo passado como argumento. 

faça a primeira palavra do elemento "p" que está no componente "Header", ser retornada dinamicamente 
através do array "reactDescriptions" utilizando a função "genRandomInt".

crie uma constante "description" que recebe o retorno da expressão dinâmica no elemento "p" e 
substitua a expressão pela constante.

-----------------------------------------------------------------------------------------

Aula - 43

através das paravras-chave "import" "export", importe a imagem do caminho 
"./assets/react-core-concepts.png" para o arquivo "App.jsx" em uma variável "reactImg".

faça o atributo "src" do elemento "img" no componente "Header", receber a variável "reactImg"
por uma forma de sintaxe dinâmica.

-----------------------------------------------------------------------------------------

Aula - 44

entre os componentes "App" e "Header", crie um componente "CoreConcept".

esse componente deve retornar uma elemento nesse modelo:

<li>
	<img src="..." alt="..." />
	<h3>TITLE</h3>
	<p>DESCRIPTION</p>
</li>

no componente "App", adicione como primeiro elemento filho do elemento "main", um 
elemento "section" com id "core-concepts".

mova o elemento "h2" para dentro desse elemento "section" e modifique o conteúdo para
"Core Concepts".

após o elemento "h2", adicione um elemento "ul" que renderiza 4 componentes "CoreConcept".

no primeiro componente "CoreConcept", adicione um atributo(props) "title" com o valor 
"Components" e um atributo "description" com o valor "The core UI building block.".

adicione um atributo "image" que receberá o valor de forma dinâmica.

para isso, importe para o arquivo "App.jsx" em uma variável "componentsIgm", a referência
da imagem que está no caminho "./assets/components.png".

passe o valor para o atributo "image".

no componente "CoreConcept", adicione um parâmetro "props" que irá conter um objeto com
as propriedades e valores passados como argumentos na renderização do componente.

utilize esse objeto para passar de forma dinâmica os valores dos atributos e conteúdo dos
elementos no componente "CoreConcept".

para o valor do atributo "alt" do elemento "img", utilize o valor da propriedade "title".

adicione o atributo "title" para no segundo componente "CoreConcept" que está sendo 
renderizado com o valor "Props".

-----------------------------------------------------------------------------------------

Aula - 45

parte 1

crie um arquivo "data.js" na pasta "src" contendo o código abaixo:

import componentsImg from './assets/components.png';
import propsImg from './assets/config.png';
import jsxImg from './assets/jsx-ui.png';
import stateImg from './assets/state-mgmt.png';

export const CORE_CONCEPTS = [
  {
    image: componentsImg,
    title: 'Components',
    description:
      'The core UI building block - compose the user interface by combining multiple components.',
  },
  {
    image: jsxImg,
    title: 'JSX',
    description:
      'Return (potentially dynamic) HTML(ish) code to define the actual markup that will be rendered.',
  },
  {
    image: propsImg,
    title: 'Props',
    description:
      'Make components configurable (and therefore reusable) by passing input data to them.',
  },
  {
    image: stateImg,
    title: 'State',
    description:
      'React-managed data which, when changed, causes the component to re-render & the UI to update.',
  },
];

importe a constante "CORE_CONCEPTS" para o arquivo "App.jsx".

use o array na "CORE_CONCEPTS" para passar de forma dinâmica os valores dos atributos na
renderização dos componentes "CoreConcept" no modelo:
title={CORE_CONCEPTS[0].title}
description={CORE_CONCEPTS[0].description}
image={CORE_CONCEPTS[0].image}

exclua a linha que importa a referência do arquivo no caminho "./assets/components.png".

parte 2

a partir do segundo componente "CoreConcept" renderizado, modifique a sintaxe de forma que 
os atributos e valores sejam passados utilizando o operador "spread".

parte 3

no componente "CoreConcept", utilize atribuição de "destructuring" no parâmetro da 
função para desestruturar as propriedades o objeto passado como argumento.

faça as alterações necessárias com as propriedades desestruturadas do objeto.

-----------------------------------------------------------------------------------------

Aula - 47

no diretório "src", crie uma pasta "components".

dentro da pasta components, crie os arquivos:
"Header.jsx"
""

recorte a função (componente) "Header", a função "genRandomInt" e a const "reactDescriptions" e 
cole no arquivo "Header.jsx".

exporte o componente "Header" com a palavra-chave "export default".

importe o componente "Header" no arquivo "App.jsx".

recorte a linha de código no arquivo "App.jsx" que importa o arquivo "react-core-concepts.png"
e cole no topo do código do arquivo "Header.jsx".

ajuste o caminho da importação para funcionar.

na pasta "components", crie um arquivo "CoreConcept.jsx".

recorte a função "CoreConcept" do arquivo "App.jsx" e cole no arquivo "CoreConcept.jsx".

exporte o componente "CoreConcept" com a palavra-chave "export default".

importe o compoente "CoreConcept" no arquivo "App.jsx".

-----------------------------------------------------------------------------------------

Aula - 48

na pasta "components", crie um arquivo "Header.css".

no arquivo "index.css", recorte todo código relacionado a estilização do elemento "header".

cole o código no arquivo "Header.css".

importe o arquivo "Header.css" para o arquivo "Header.jsx".

na pasta "components", crie uma pasta "Header".

transfira os arquivos "Header.jsx" e "Header.css" para essa pasta.

atualize o caminho na importação do arquivo "Header.jsx" no arquivo "App.jsx".

atualize o caminho na importação do arquivo "react-core-concepts.png" no arquivo "Header.jsx".

-----------------------------------------------------------------------------------------

Aula - 49

no arquivo "App.jsx", adicione um elemento "section" como irmão adjacente do primeiro
elemento section.

esse novo elemento deve ter um atributo "id" com o valor "examples".

dentro desse elemento, adicione um elemento "h2" com o conteúdo "Examples".

abaixo do elemento "h2", adicione um elemento "menu".

na pasta "components", crie um arquivo "TabButton.jsx".

insira o código abaixo no arquivo "TabButton.jsx":
export default function TabButton() {
	return <li><button></button></li>
}

importe o componente "TabButton" para o arquivo "App.jsx".

dentro do elemento "menu", insira o elemento abaixo:
<TabButton>Components</TabButton>

no arquivo "TabButton.jsx", adicione um parâmetro "props" na função "TabButton".

faça a atualização no elemento "button" com o código abaixo:
<button>{props.children}</button>

use destructuring assignment para pegar a propriedade "children" do objeto "props"
diretamente do parâmetro da função.  

faça a atualização no elemento "button" com o código abaixo:
<button>{children}</button>

adicione os outros componentes "TabButton":
<TabButton>JSX</TabButton>
<TabButton>Props</TabButton>
<TabButton>State</TabButton>

-----------------------------------------------------------------------------------------

Aula - 50

no arquivo "TabButton.jsx", adicione uma prop especial "onClick" no componente "button".

antes do retorno da função "TabButton", crie uma função "handleClick".

na função "handleClick", execute um console.log com o argumento "Hello World!".

passe a função "handleClick" como valor da prop especial "onClick" no componente "button".

abra o console do browser e faça um teste clicando nos botões do projeto.

-----------------------------------------------------------------------------------------

Aula - 51

recorte a função "handleClick" e cole no topo do corpo da função "App" no arquivo "App.jsx".

renomei a função "handleClick" para "handleSelect".

atualize o valor do argumento do console para "Hello World - selected!".

no primeiro componente "TabButton", adicione um atributo "onSelect" e passe como valor a
função "handleSelect".

no arquivo "TabButton", adicione a propriedade "onSelect" na desestruturação da função
"TabButton".

a propriedade "onSelect" deverá ter o valor da função "handleSelect".

passe o valor da propriedade "onSelect" para o atributo "onClick" no componente "button".

adicione um atributo "onSelect" e passe como valor a função "handleSelect" em todos os
componentes "TabButton".

abra o console do browser e faça um teste clicando nos botões do projeto.

-----------------------------------------------------------------------------------------

Aula - 52

na função "handleSelect" do arquivo "App.jsx", adicione um parâmetro "selectedButton".

modifique o valor passado para o atributo "onSelect" do componente "TabButton" para
uma arrow function que executa a função "handleSelect".

passe como argumento das execuções da função "handleSelect" as seguintes strings:
'components', 'jsx', 'props' e 'state'

passe como argumento do console.log da função "handleSelect", o parâmetro "selectedButton".

-----------------------------------------------------------------------------------------

Aula - 54

no topo do arquivo "App.jsx", importe o Hook "useState" da biblioteca "react".

execute a função "useState" no topo do escopo da função "App".

passe como argumento da execução de "useState" a string "Please click a button".

use array destructuring para armazenar o retorno da execução de "useState".

armazene o primeiro elemento em uma constante "selectedTopic".

armazene o segundo elemento em uma constante "setSelectedTopic" que é uma função.

dentro da função "handleSelect", execute a função "selectedTopic" passando como argumento
o parâmetro "selectedButton".

exiba o valor da constante "selectedTopic" abaixo do elemento "menu" da função "App".

teste a aplicação no browser clicando nos botões dinâmicos.

-----------------------------------------------------------------------------------------

Aula - 55

delete a linha que exibe o valor de "selectedTopic".

no lugar, adicione um compnente com um elemento "div".

adicione ao elemento, um atributo "id" com o valor "tab-content".

dentro do elemento "div", adicione os seguintes elementos:
"
	<h3></h3>
	<p></p>
	<pre>
		<code></code>
	</pre>
"

importe a constante "EXAMPLES" do arquivo "data.js" para o arquivo "App.jsx".

renderize de forma dinâmica os valores dos objetos de acordo com o clique do usuário.

no elemento "h3", exiba o valor da propriedade "title" do objeto clicado que está 
no objeto "EXAMPLES".

no elemento "p", exiba o valor da propriedade "description" do objeto clicado que está 
no objeto "EXAMPLES".

no elemento "code", exiba o valor da propriedade "code" do objeto clicado que está 
no objeto "EXAMPLES".

utilize a notação de colchete para isso.

modifique o valor passado como argumento inicial da função "useState" para
a string "components".

-----------------------------------------------------------------------------------------

Aula - 56

modifique o valor passado como argumento inicial da função "useState" para "null".

acima do retorno da função "App", declare uma variável "tabContent" que armazena
o valor do elemento abaixo:
"<p>Please select a topic.</p>"

abaixo, crie uma condição que chega o valor da constante "selectedTopic".

caso "selectedTopic" tenha um valor truthy, recorte a "div" com id "tab-content" e
reatribua o valor da variável "tabContent" para armazenar esse componente.

no lugar da div, faça a função "App" renderizar o valor da variável "tabContent".

-----------------------------------------------------------------------------------------

Aula - 57

no arquivo "TabButton.jsx", adicione um parâmetro "isSelected" na desestruturação da 
função "TabButton".

adicione uma propriedade "className" no elemento "button" da função "TabButton".

faça essa propriedade receber o valor de uma string "active" caso o valor da propriedade
"isSelected" armazene um boolean com o valor "true".

caso contrário, a propriedade deve receber uma string vazia.

faça isso utilizando o operator ternário.

adicione um atributo "isSelected" para cada combonente "TabButton" do arquivo "App.jsx". 

faça o atributo receber o valor de forma dinâmica baseado no valor da constante
"selectedTopic".

-----------------------------------------------------------------------------------------

Aula - 58

faça os componentes "CoreConcet" serem renderizados de forma dinâmica baseado na 
quantidade de elementos no array "CORE_CONCEPTS".

utilize o método "map" para isso.

na função de callback do método "map", nomei o parâmetro de "conceptItem".

comente um elemento do array "CORE_CONCEPTS" no arquivo "data.js" e cheque o resultado
da aplicação no browser.

adicione uma propriedade "key" no elemento "CoreConcept" e passe a valor da propriedade
"title" do parâmetro "conceptItem".
