Aula - 12

copie e cole a pasta "00-project-setup" renomeando-a com o número do próximo exercício.

na pasta criada, execute o comando "tsc app.ts" e abra o arquivo "index.html" no browser
e veja no console se o arquivo foi compilado corretamente.

delete o console.log do arquivo "app.ts".

crie uma função "add" com os parâmetros "n1" e "n2" e que retorna n1 + n2.

crie uma constante "number1" que recebe o número 5 e uma constante "number2" que recebe
o número 2.8.

crie uma constante "result" que recebe o retorno da execução da função "add" passando 
como argumento as constantes "number1" e "number2".

exiba o valor de "result" no console e compile o arquivo "app.ts".

modifique o valor de "number1" para uma string "5" e exiba "result" no console.

faça com que a tipagem dos parâmetros da função "add" sejam do tipo "number".

compile o arquivo "app.ts" que exibirá um erro no terminal.

para corrigir o erro, volte o valor de "number1" para o número 5 e compile o arquivo novamente.

--------------------------------------------------------------------------------------

Aula - 13

no topo da função "add", crie uma condição checando a seguinte expressão:
"typeof n1 !== 'number' || typeof n2 !== 'number'".

caso a condição seja verdadeira, lance o seguinte erro:
"throw new Error('Incorrect input!')" 

caso contrário, retorne o resultado de n1 + n2.

execute a aplicação e cheque o console do browser.

comente o código criado acima e volte a função para o código anterior.

--------------------------------------------------------------------------------------

Aula - 15

abaixo da constante "number2", crie uma constante "printResult" recebendo o valor booleano
"true".

passe essa constante como um terceiro argumento da execução da função "add".

adicione um terceiro parâmetro "showResult" na função "add".

defina a tipagem desse parâmetro para o tipo "boolean".

crie uma condição na função "add" onde caso a variável "showResult" receba o valor "true"
um console.lo é executado mostrando o resultado de n1 + n2.

caso contrário, a função retorna o resultado de n1 + n2.

delete a constante "result".

abaixo da constante "printResult", crie uma constante "resultPhrase" recebendo o valor de
uma string "Result is:".

passe a "resultPhrase" como quarto argumento da execução da função "add".

adicione um parâmetro "phrase" na função "add", definindo a tipagem do tipo "strinng".

modifique o valor do argumneto da execução do console.log para: "phrase + n1 + n2".

compile o arquivo e verifique o resultado no browser. 

corrija o erro para que o console.lo exiba o resultado correto.

--------------------------------------------------------------------------------------

Aula - 17

renomei o arquivo "app.ts" para "basics.ts" e crie um novo arquivo "app.ts".

no arquivo "app.ts", crie uma constante "person" que recebe o seguinte objeto:

{
	name: 'Maximilian',
	age: 30
}

execute um console.log, passando como argumento a constante "person".

defina a tipagem da constante "person" com o tipo "object".

tente acessar a propriedade "name" do objeto "person" no console.log adicionando um ponto('.').

redefina a tipagem da constante "person" como um objeto com as propriedades "name" e "age"
e com o tipo "string" para "name" e "number" para "age".

tente acessar a propriedade "name" do objeto "person" no console.log adicionando um ponto('.').

--------------------------------------------------------------------------------------

Aula - 19

no objeto "person", adicione uma propriedade "hobbies".

o valor que a propriedade "hobbies" armazena, deve ser um array com as strings "Sports" e
"Cooking".

na tipagem do objeto "person", tipe a propriedade "hobbies" como um array de strings "string[]".

itere sobre o array "hobbies" através de um "for" e exiba os valores no console.

execute um método "toUpperCase" nos valores e exiba o resultado no console.

--------------------------------------------------------------------------------------

Aula - 20

no objeto "person", adicione a propriedade "role" armazenando o valor do array abaixo:
"[2, 'author']"

tipe a propriedade adicionada acima com o valor abaixo:
"[number, string]"

tente executar um método "push" no array "role" adicionando um valor da string "admin".

comente a linha executando o método "push".

tente passar o item 'user' para o array "role" através da notação abaixo:
"person.role[2] = 'user'"

comente a linha criada acima.

--------------------------------------------------------------------------------------

Aula - 21

crie uma tipagem personalizada "Role" com a palavra-chave "enum" no modelo abaixo:
"enum Role { ADMIN, READ_ONLY, AUTHOR }"

passe o valor a propriedade "ADMIN" do objeto "Role" para a propriedade "role" do objeto
"person".

na condição, cheque se a propriedade "role" do objeto "person" tem o mesmo valor da
propriedade "ADMIN" do objeto "Role".

caso seja, execute um console.log com a string "is admin".

--------------------------------------------------------------------------------------

Aula - 23

renomei o arquivo "app.ts" para "objs-arrays-enums.ts".

crie um novo arquivo "app.ts".

coipe o código abaixo e cole no arquivo "app.ts".
"
function combine(input1: number, input2: number) {
	const result = input1 + input2;
	return result;
}

const combinedAges = combine(30, 26);
console.log(combinedAges);
const combinedNames = combine('Max', 'Anna');
console.log(combinedNames);

"

corrija o erro fazendo com que a função "combine" aceite argumentos do tipo 
"number" ou "string" utilizando "union types".

para corrigir o erro da função, faça uma condição que checa se os valores dos parâmetros
são do tipo "number".

caso sejam, a função deve retornar a soma dos valores.

caso não sejam, a função deve converter explicitamente os valores para "string" e retornar
a concatenação das strings.

--------------------------------------------------------------------------------------

Aula - 25

crie uma tipagem customizada "Combinable" com a palavra-chave "type".

a tipagem "Combinable" deve aceitar os tipos "number" ou "string".

crie uma variável "value1" tipando-a com a tipagem "Combinable".

teste a variável "value1" passando alguns tipos de dados diferente.

--------------------------------------------------------------------------------------

Aula - 27

renomei o arquivo "app.ts" para "union-aliases.ts".

crie um novo arquivo "app.ts".

copie e cole no arquivo "app.ts" a função abaixo:
"
function add(n1: number, n2:number){
	return n1 + n2;
}
"

faça a tipagem do retorno dessa função de forma explícita para o tipo "number".

--------------------------------------------------------------------------------------

Aula - 28

declare uma variável "combineValues".

faça essa variável receber o valor da função "add".

na declaração da variável, faça a tipagem dela de modo que ela aceite uma função contendo
2 parâmetros do tipo "number" e retorna um valor do tipo "number".

teste a função "combineValues".

--------------------------------------------------------------------------------------

Aula - 29

crie uma função "addAndHandle" contendo 3 parâmetros: "n1", "n2" e "cb".

tipe os 2 primeiros parâmetros como "number".

tipe o terceiro parâmetro como uma função que tem um parâmetro do tipo "number" e tem o 
retorno do tipo "void".

a função "addAndHandle" deve somar "n1" com "n2" e armazenar em uma constante "result".

e em seguida, deve executar "cb" passando como argumento a constante "result".

teste a função "addAndHandle" executando-a, passando como primeiro argumento o valor 10 e
como segundo o valor 5. 

como terceiro uma função que contém um parâmetro "result" e exibe o resultado de 
"result" em um console.log.

--------------------------------------------------------------------------------------

Aula - 30

renomeio o arquivo "app.ts" para "functions.ts".

crie um novo arquivo "app.ts".

crie uma variável "userInput1" tipando-a com o valor "any".

crie uma variável "userInput2" tipando-a com o valor "unknown".

crie uma variável "userName" tipando-a com o valor "string".

atribua a variável "userName" o valor da variável "userInput1".

atribua a variável "userName" o valor da variável "userInput2".

para corrigir o erro, faça uma condição que checa o tipo da variável "userInput2".

caso o valor seja do tipo "string", atribua a variável "userName" o valor da variável 
"userInput2".

--------------------------------------------------------------------------------------