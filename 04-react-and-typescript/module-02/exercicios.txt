Aula - 13

crie uma pasta com o próximo número e dentro crie um arquivo "first-app.ts".

copie e cole o código abaixo e de forma explícita, set a tipagem da variável 'userID' 
para que ela aceite a reatribuição do tipo number ou string.

*/

// let userID = "abc1";
// userID = 123;

/*

para compilar o arquivo, abra o terminal integrado e rode o comando 
'npx tsc' + o nome do arquivo.

------------------------------------------------------------------------------------

Aula - 14

crie uma variável "user" e set a tipagem dela (de forma explícita) para que ela aceite objetos com as seguintes
propriedades e tipo:
name -> string
age -> number
isAdmin -> boolean
id: string ou number

atribua a ela o seguinte objeto:
{
name: "Max",
age: "34",
isAdmin: "true",
id: "abc",
};

------------------------------------------------------------------------------------

Aula - 15

copie e cole o código abaixo:

let hobbies: string[];

hobbies = ["Sports", "Cooking", "Reading"];

// hobbies = [
//   {
//     name: "Max",
//     age: 34,
//   },
//   {
//     name: "Igor",
//     age: 36,
//   },
// ];

comente a linha de atribuição da variável "hobbies" e set a tipagem da variável 
(explicitamente), de forma que ela aceite um array de objetos com as propriedades e tipos:
name -> string
age -> number 

------------------------------------------------------------------------------------

Aula - 16

crie uma função "add" que vai receber 2 números como argumentos e retorna a soma desses números.

adicione tipagens de forma explícita do tipo "number" para os parâmetros e retorno da função.

exiba no console o retorno da função, passando como argumentos os números 12 e 30

------------------------------------------------------------------------------------

Aula - 17

crie uma função "calculate" que chama uma função "calcFn" passando 2 argumentos: a, b.

a função "calcFn" e os 2 argumentos "a" e "b", são parâmetros da função "calculate".

adicione os com 3 parâmetros na função "calculate": "a", "b" e "calcFn".

faça a tipagem de forma explícita dos parâmetros "a" e "b" para o tipo "number".

faça a tipagem de forma explícita para o parâmetro "calcFn" de modo que seja uma função que 
receba 2 argumentos do tipo "number" e returna um valor do tipo "number". 

use as variáveis "c" e "d" na tipagem da função.

exiba no console o retorno da função "calculate", passando como argumento os números 7 e 7 para 
os primeiros parâmetros e a função "add" (criada no exercício anterior) como terceiro argumento.

------------------------------------------------------------------------------------

Aula - 18

antes da função "calculate", crie uma tipagem customizada "AddFn" com a palavra-chave "type"
para o parâmetro "calcFn" da função "calculate".

------------------------------------------------------------------------------------

Aula - 20

crie uma tipagem customizada "User" com a palavra-chave reservada "interface" para um objeto 
contendo as seguintes propriedades e tipos:
{name: string; age: number}

crie 2 objetos com as constantes "user1" e "user2", passe a tipagem "User" criada acima, e 
crie 2 objetos com as propriedades e valores válidos.

------------------------------------------------------------------------------------

Aula - 21

crie uma tipagem customizada "Admin" com a palavra-chave reservada "type" para um objeto 
contendo as seguintes propriedades e tipos:
{ permissions: string[] }

crie uma tipagem customizada "AppUser" com a palavra-chave reservada "type" para um objeto 
contendo as seguintes propriedades e tipos:
{ userName: string }

faça uma fusão das tipagens "Admin" e "AppUser" em uma tipagem customizada "AppAdmin" 
com a palavra-chave reservada "type".

crie uma variável "admin" que recebe a tipagem "AppAdmin".

passe um objeto com as seguintes características:

{permissions: ['login'], userName: 'Max'}

comente o código acima e faça o mesmo utilizando uma tipagem customizada com a palavra-chave 
reservada "interface".

------------------------------------------------------------------------------------

Aula - 22

crie uma variável "role" e faça a tipagem dela de forma que ela só aceite as seguintes strings:
'admin', 'user' ou 'editor'.

------------------------------------------------------------------------------------

Aula - 23

crie uma tipagem customizada "Role" com a palavra-chave reservada "type".

essa tipagem deve aceitar os valores: 'admin', 'user' ou 'editor'.

crie uma função "perforAction".

adicione um primeiro parâmetro "action" e tipe-o com o valor "string" ou "number".

adicione um segundo parâmetro "role" e tipe-o com a tipagem customizada "Role".

dentro da função, crie uma condição que checa se o valor de "role" é igual a "admin"
e se o tipo do parâmetro "action" é "string".

caso a condição seja verdadeira, execute um console com o argumento: `O valor de role: ${role}`.

execute a função -> performAction('Greet', 'admin')

------------------------------------------------------------------------------------

Aula - 25

ao final do código, adicione o código abaixo:
let roles1: Array<Role>;
roles1 = ['admin', 'editor'];

let roles2: Role[];
roles2 = ['admin', 'editor'];

type DataStorage<T> = {
	storage: T[];
	add: (data: T) => void;
};

const textStorage: DataStorage<string> = {
	storage: [],
	add(data) {
		this.storage.push(data);
	}
}

const userStorage: DataStorage<User> = {
	storage: [],
	add(user) {}
}

function merge<T, U>(a: T, b: U) {
	return {
		...a,
		...b
	}
}

const newUser = merge<{name: string}, {age: number}>({name: 'Max'}, {age: 34}) {

}


